{"version":3,"sources":["../src/index.ts","../src/commands/build.ts","../src/preflights/preflight-build.ts","../src/utils/hightlighter.ts","../src/utils/logger.ts","../src/utils/get-registry.ts","../src/schema.ts","../package.json"],"sourcesContent":["#!/usr/bin/env node\nimport { Command } from \"commander\";\nimport { build } from \"./commands/build\";\nimport packageJson from \"../package.json\";\n\nprocess.on(\"SIGINT\", () => process.exit(0));\nprocess.on(\"SIGTERM\", () => process.exit(0));\n\nasync function main() {\n  const program = new Command();\n\n  program\n    .name(\"shadcn-registry\")\n    .description(\"CLI to build Shadcn registry file of your componenets\")\n    .version(\n      packageJson.version || \"1.0.0\",\n      \"-v, --version\",\n      \"display the version number\"\n    );\n\n  program.addCommand(build);\n\n  program.parse();\n}\n\nmain();\n","import path from \"path\";\nimport { Command } from \"commander\";\nimport { z } from \"zod\";\nimport { preflightBuild } from \"@/src/preflights/preflight-build\";\nimport { logger } from \"@/src/utils/logger\";\nimport { getRegistry } from \"@/src/utils/get-registry\";\n\nexport const buildOptionSchema = z.object({\n  cwd: z.string(),\n});\n\nexport const build = new Command()\n  .name(\"build\")\n  .description(\"build the registry files for your components\")\n  .argument(\n    \"[components...]\",\n    \"the components to add or a url to the component.\"\n  )\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\n  .option(\"-o, --overwrite\", \"overwrite existing files.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .option(\"-a, --all\", \"add all available components\", false)\n  .option(\"-p, --path <path>\", \"the path to add the component to.\")\n  .option(\"-s, --silent\", \"mute output.\", false)\n  .option(\n    \"--src-dir\",\n    \"use the src directory when creating a new project.\",\n    false\n  )\n  .action(async (components, opts) => {\n    const options = buildOptionSchema.parse({\n      cwd: path.resolve(opts.cwd),\n      ...opts,\n    });\n\n    const { errors } = await preflightBuild(options);\n\n    if (Object.keys(errors).length > 0) {\n      logger.error(errors);\n      process.exit(1);\n    }\n\n    const registry = await getRegistry(options);\n    console.log(registry);\n  });\n","import { z } from \"zod\";\nimport fs from \"fs-extra\";\nimport path from \"path\";\nimport { buildOptionSchema } from \"../commands/build\";\nimport { logger } from \"@/src/utils/logger\";\nimport { Errors } from \"@/src/utils/errors\";\n\nexport const preflightBuild = async (\n  options: z.infer<typeof buildOptionSchema>\n) => {\n  const errors: Record<number, boolean> = {};\n\n  // Check if 'registry.config.json' exists\n  if (\n    !fs.existsSync(options.cwd) ||\n    !fs.existsSync(path.join(options.cwd, \"registry.config.json\"))\n  ) {\n    logger.error(\n      \"No 'registry.config.json' found in the current working directory.\"\n    );\n    errors[Errors.MISSING_REGISTRY_FILE] = true;\n    return { errors };\n  }\n\n  return { errors };\n};\n","import { cyan, green, red, yellow } from \"kleur/colors\";\n\nexport const highlighter = {\n  error: red,\n  warn: yellow,\n  info: cyan,\n  success: green,\n};\n","import { highlighter } from \"@/src/utils/hightlighter\";\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(highlighter.error(args.join(\" \")));\n  },\n  warn(...args: unknown[]) {\n    console.log(highlighter.warn(args.join(\" \")));\n  },\n  info(...args: unknown[]) {\n    console.log(highlighter.info(args.join(\" \")));\n  },\n  success(...args: unknown[]) {\n    console.log(highlighter.success(args.join(\" \")));\n  },\n  log(...args: unknown[]) {\n    console.log(args.join(\" \"));\n  },\n  break() {\n    console.log(\"\");\n  },\n};\n","import path from \"path\";\nimport { z } from \"zod\";\nimport { buildOptionSchema } from \"@/src/commands/build\";\nimport fs from \"fs-extra\";\nimport { registryEntrySchema } from \"@/src/schema\";\nimport { logger } from \"@/src/utils/logger\";\nimport { build } from \"tsup\";\n\nconst configSchema = z.object({\n  baseUrl: z.string(),\n  registry: z.array(registryEntrySchema),\n});\n\nexport const getRegistry = async (\n  options: z.infer<typeof buildOptionSchema>\n): Promise<any | null> => {\n  const configPath = path.join(options.cwd, \"registry.config.json\");\n\n  //   await build({\n  //     clean: true,\n  //     dts: true,\n  //     entry: [path.join(options.cwd, \"registry.ts\")],\n  //     format: [\"esm\"],\n  //     sourcemap: true,\n  //     minify: true,\n  //     target: \"esnext\",\n  //     outDir: \"distt\",\n  //   });\n\n  //   const config = await fs.readJSONSync(configPath);\n  const config = await import(path.join(options.cwd, \"/ddist/registry.js\"));\n  console.log(config.default);\n\n  if (!configSchema.safeParse(config).success) {\n    logger.error(\"Invalid registry config file.\");\n    return null;\n  }\n\n  return config;\n};\n","// https://github.com/shadcn-ui/ui/blob/shadcn%402.0.0/apps/www/registry/schema.ts\nimport { z } from \"zod\";\n\nexport const blockChunkSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  component: z.any(),\n  file: z.string(),\n  code: z.string().optional(),\n  container: z\n    .object({\n      className: z.string().nullish(),\n    })\n    .optional(),\n});\n\nexport const registryItemTypeSchema = z.enum([\n  \"registry:style\",\n  \"registry:lib\",\n  \"registry:example\",\n  \"registry:block\",\n  \"registry:component\",\n  \"registry:ui\",\n  \"registry:hook\",\n  \"registry:theme\",\n  \"registry:page\",\n]);\n\nexport const registryItemFileSchema = z.union([\n  z.string(),\n  z.object({\n    path: z.string(),\n    content: z.string().optional(),\n    type: registryItemTypeSchema,\n    target: z.string().optional(),\n  }),\n]);\n\nexport const registryItemTailwindSchema = z.object({\n  config: z.object({\n    content: z.array(z.string()).optional(),\n    theme: z.record(z.string(), z.any()).optional(),\n    plugins: z.array(z.string()).optional(),\n  }),\n});\n\nexport const registryItemCssVarsSchema = z.object({\n  light: z.record(z.string(), z.string()).optional(),\n  dark: z.record(z.string(), z.string()).optional(),\n});\n\nexport const registryEntrySchema = z.object({\n  name: z.string(),\n  type: registryItemTypeSchema,\n  description: z.string().optional(),\n  dependencies: z.array(z.string()).optional(),\n  devDependencies: z.array(z.string()).optional(),\n  registryDependencies: z.array(z.string()).optional(),\n  files: z.array(registryItemFileSchema).optional(),\n  tailwind: registryItemTailwindSchema.optional(),\n  cssVars: registryItemCssVarsSchema.optional(),\n  source: z.string().optional(),\n  category: z.string().optional(),\n  subcategory: z.string().optional(),\n  chunks: z.array(blockChunkSchema).optional(),\n});\n\nexport const registrySchema = z.array(registryEntrySchema);\n\nexport type RegistryEntry = z.infer<typeof registryEntrySchema>;\n\nexport type Registry = z.infer<typeof registrySchema>;\n\nexport const blockSchema = registryEntrySchema.extend({\n  type: z.literal(\"registry:block\"),\n  style: z.enum([\"default\", \"new-york\"]),\n  component: z.any(),\n  container: z\n    .object({\n      height: z.string().nullish(),\n      className: z.string().nullish(),\n    })\n    .optional(),\n  code: z.string(),\n  highlightedCode: z.string(),\n});\n\nexport type Block = z.infer<typeof blockSchema>;\n\nexport type BlockChunk = z.infer<typeof blockChunkSchema>;\n","{\n  \"name\": \"shadcn-registry\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"exports\": \"./dist/index.js\",\n  \"bin\": {\n    \"shadreg\": \"./dist/index.js\"\n  },\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"tsup --watch\",\n    \"build\": \"tsup\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"commander\": \"^12.1.0\",\n    \"fs-extra\": \"^11.2.0\",\n    \"kleur\": \"^4.1.5\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"zod\": \"^3.23.8\"\n  },\n  \"devDependencies\": {\n    \"@types/fs-extra\": \"^11.0.4\",\n    \"@types/node\": \"^22.7.9\",\n    \"@types/react\": \"^18.3.12\",\n    \"tailwindcss\": \"^3.4.14\",\n    \"tsup\": \"^8.3.4\",\n    \"typescript\": \"^5.6.3\"\n  }\n}\n"],"mappings":"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","names":["Command","path","Command","z","fs","path","cyan","green","red","yellow","highlighter","logger","args","highlighter","preflightBuild","options","errors","fs","path","logger","path","z","z","blockChunkSchema","registryItemTypeSchema","registryItemFileSchema","registryItemTailwindSchema","registryItemCssVarsSchema","registryEntrySchema","registrySchema","blockSchema","configSchema","z","registryEntrySchema","getRegistry","options","configPath","path","config","logger","buildOptionSchema","z","build","Command","components","opts","options","path","errors","preflightBuild","logger","registry","getRegistry","package_default","main","program","Command","package_default","build"]}