#!/usr/bin/env node
import{Command as O}from"commander";import R from"path";import{Command as E}from"commander";import{z as d}from"zod";import p from"fs-extra";import j from"path";import{cyan as b,green as w,red as x,yellow as S}from"kleur/colors";var i={error:x,warn:S,info:b,success:w};var n={error(...e){console.log(i.error(e.join(" ")))},warn(...e){console.log(i.warn(e.join(" ")))},info(...e){console.log(i.info(e.join(" ")))},success(...e){console.log(i.success(e.join(" ")))},log(...e){console.log(e.join(" "))},break(){console.log("")}};var l=async e=>{let r={};return!p.existsSync(e.cwd)||!p.existsSync(j.join(e.cwd,"registry.config.json"))?(n.error("No 'registry.config.json' found in the current working directory."),r[0]=!0,{errors:r}):{errors:r}};import g from"path";import{z as c}from"zod";import{z as o}from"zod";var k=o.object({name:o.string(),description:o.string(),component:o.any(),file:o.string(),code:o.string().optional(),container:o.object({className:o.string().nullish()}).optional()}),m=o.enum(["registry:style","registry:lib","registry:example","registry:block","registry:component","registry:ui","registry:hook","registry:theme","registry:page"]),I=o.union([o.string(),o.object({path:o.string(),content:o.string().optional(),type:m,target:o.string().optional()})]),v=o.object({config:o.object({content:o.array(o.string()).optional(),theme:o.record(o.string(),o.any()).optional(),plugins:o.array(o.string()).optional()})}),z=o.object({light:o.record(o.string(),o.string()).optional(),dark:o.record(o.string(),o.string()).optional()}),s=o.object({name:o.string(),type:m,description:o.string().optional(),dependencies:o.array(o.string()).optional(),devDependencies:o.array(o.string()).optional(),registryDependencies:o.array(o.string()).optional(),files:o.array(I).optional(),tailwind:v.optional(),cssVars:z.optional(),source:o.string().optional(),category:o.string().optional(),subcategory:o.string().optional(),chunks:o.array(k).optional()}),A=o.array(s),H=s.extend({type:o.literal("registry:block"),style:o.enum(["default","new-york"]),component:o.any(),container:o.object({height:o.string().nullish(),className:o.string().nullish()}).optional(),code:o.string(),highlightedCode:o.string()});var C=c.object({baseUrl:c.string(),registry:c.array(s)}),y=async e=>{let r=g.join(e.cwd,"registry.config.json"),t=await import(g.join(e.cwd,"/ddist/registry.js"));return console.log(t.default),C.safeParse(t).success?t:(n.error("Invalid registry config file."),null)};var G=d.object({cwd:d.string()}),f=new E().name("build").description("build the registry files for your components").argument("[components...]","the components to add or a url to the component.").option("-y, --yes","skip confirmation prompt.",!1).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-a, --all","add all available components",!1).option("-p, --path <path>","the path to add the component to.").option("-s, --silent","mute output.",!1).option("--src-dir","use the src directory when creating a new project.",!1).action(async(e,r)=>{let t=G.parse({cwd:R.resolve(r.cwd),...r}),{errors:a}=await l(t);Object.keys(a).length>0&&(n.error(a),process.exit(1));let u=await y(t);console.log(u)});var h={name:"shadcn-registry",version:"1.0.0",description:"",main:"index.js",exports:"./dist/index.js",bin:{shadreg:"./dist/index.js"},type:"module",scripts:{dev:"tsup --watch",build:"tsup",test:'echo "Error: no test specified" && exit 1'},author:"",license:"ISC",dependencies:{commander:"^12.1.0","fs-extra":"^11.2.0",kleur:"^4.1.5",react:"^18.3.1","react-dom":"^18.3.1",zod:"^3.23.8"},devDependencies:{"@types/fs-extra":"^11.0.4","@types/node":"^22.7.9","@types/react":"^18.3.12",tailwindcss:"^3.4.14",tsup:"^8.3.4",typescript:"^5.6.3"}};process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));async function T(){let e=new O;e.name("shadcn-registry").description("CLI to build Shadcn registry file of your componenets").version(h.version||"1.0.0","-v, --version","display the version number"),e.addCommand(f),e.parse()}T();
//# sourceMappingURL=index.js.map